/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram Webhook
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –û–î–ò–ù –†–ê–ó –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è –Ω–∞ Vercel
 */

const BOT_TOKEN = '8008452513:AAFFoaZm8PGPHIllv8DG9Oirtmm1Aq-LidY';
const WEBHOOK_URL = process.env.WEBHOOK_URL || 'YOUR_VERCEL_URL_HERE';

async function setWebhook() {
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`;
  
  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook...');
  console.log('üìç Webhook URL:', WEBHOOK_URL);
  
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        url: `${WEBHOOK_URL}/api/telegram/webhook`,
        allowed_updates: ['message'],
      }),
    });

    const data = await response.json();
    
    if (data.ok) {
      console.log('‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('üìã –û—Ç–≤–µ—Ç:', data);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞:', data);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook:', error);
  }
}

async function getWebhookInfo() {
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`;
  
  console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ webhook...');
  
  try {
    const response = await fetch(url);
    const data = await response.json();
    
    if (data.ok) {
      console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:');
      console.log('   URL:', data.result.url || '(–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)');
      console.log('   Pending updates:', data.result.pending_update_count);
      if (data.result.last_error_message) {
        console.log('   ‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:', data.result.last_error_message);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
  }
}

async function deleteWebhook() {
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/deleteWebhook`;
  
  console.log('\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ webhook...');
  
  try {
    const response = await fetch(url);
    const data = await response.json();
    
    if (data.ok) {
      console.log('‚úÖ Webhook —É–¥–∞–ª–µ–Ω');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error);
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const args = process.argv.slice(2);
  const command = args[0];

  if (command === 'delete') {
    await deleteWebhook();
  } else if (command === 'info') {
    await getWebhookInfo();
  } else if (command === 'set') {
    const customUrl = args[1];
    if (customUrl) {
      process.env.WEBHOOK_URL = customUrl;
    }
    
    if (!process.env.WEBHOOK_URL || process.env.WEBHOOK_URL === 'YOUR_VERCEL_URL_HERE') {
      console.error('‚ùå –û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ WEBHOOK_URL');
      console.log('\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
      console.log('  node setup-webhook.js set https://your-app.vercel.app');
      console.log('  WEBHOOK_URL=https://your-app.vercel.app node setup-webhook.js set');
      process.exit(1);
    }
    
    await setWebhook();
    await getWebhookInfo();
  } else {
    console.log('üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('  node setup-webhook.js set <url>   - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook');
    console.log('  node setup-webhook.js info        - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å');
    console.log('  node setup-webhook.js delete      - —É–¥–∞–ª–∏—Ç—å webhook');
    console.log('\n–ü—Ä–∏–º–µ—Ä:');
    console.log('  node setup-webhook.js set https://laundry-app-one.vercel.app');
  }
}

main();
