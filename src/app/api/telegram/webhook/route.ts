import { NextRequest, NextResponse } from 'next/server';

const BOT_TOKEN = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN || '';

interface TelegramUpdate {
  update_id: number;
  message?: {
    message_id: number;
    from?: {
      id: number;
      first_name: string;
      last_name?: string;
      username?: string;
    };
    chat: {
      id: number;
      type: string;
    };
    text?: string;
  };
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendMessage(chatId: number, text: string, parseMode: string = 'Markdown') {
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
  
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: parseMode,
      }),
    });

    if (!response.ok) {
      console.error('Telegram API error:', await response.text());
    }
  } catch (error) {
    console.error('Error sending message:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
function handleStart(chatId: number, firstName: string) {
  const message = (
    `üëã *–ü—Ä–∏–≤–µ—Ç, ${firstName}!*\n\n` +
    `üîë *–í–∞—à Chat ID:*\n` +
    `\`${chatId}\`\n\n` +
    `üì± *–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:*\n` +
    `1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —á–∏—Å–ª–æ –≤—ã—à–µ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ)\n` +
    `2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏\n` +
    `3Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ Chat ID –≤ –ø–æ–ª–µ\n` +
    `4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'\n\n` +
    `‚úÖ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–µ–π –æ—á–µ—Ä–µ–¥–∏!`
  );
  
  return sendMessage(chatId, message);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
function handleHelp(chatId: number) {
  const message = (
    `üß∫ *–ë–æ—Ç –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Å—Ç–∏—Ä–∫—É*\n\n` +
    `*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n` +
    `/start - –ü–æ–ª—É—á–∏—Ç—å –≤–∞—à Chat ID\n` +
    `/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n` +
    `*–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*\n` +
    `1. –ù–∞–ø–∏—à–∏—Ç–µ /start\n` +
    `2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Chat ID\n` +
    `3. –í—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n` +
    `4. –ì–æ—Ç–æ–≤–æ! ‚úÖ`
  );
  
  return sendMessage(chatId, message);
}

// Webhook endpoint
export async function POST(request: NextRequest) {
  try {
    const update: TelegramUpdate = await request.json();
    
    console.log('üì® Received update:', update.update_id);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!update.message || !update.message.text) {
      return NextResponse.json({ ok: true });
    }

    const { message } = update;
    const chatId = message.chat.id;
    const text = message.text;
    const firstName = message.from?.first_name || '–¥—Ä—É–≥';

    console.log(`üí¨ Message from ${firstName} (${chatId}): ${text}`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (text === '/start') {
      await handleStart(chatId, firstName);
    } else if (text === '/help') {
      await handleHelp(chatId);
    } else {
      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
      await sendMessage(
        chatId,
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à Chat ID\n–ò–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏`
      );
    }

    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error('‚ùå Error processing webhook:', error);
    return NextResponse.json({ error: 'Internal error' }, { status: 500 });
  }
}

// GET endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ webhook —Ä–∞–±–æ—Ç–∞–µ—Ç
export async function GET() {
  return NextResponse.json({
    status: 'ok',
    message: 'Telegram webhook is active',
    bot: '@keiin_dorm_laundry_bot',
  });
}
