import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';

export async function POST(request: NextRequest) {
  try {
    const { studentId, telegramChatId } = await request.json();
    
    console.log('üì• /api/telegram/link request:', { studentId, telegramChatId });

    if (!studentId || !telegramChatId) {
      console.error('‚ùå Missing data:', { studentId, telegramChatId });
      return NextResponse.json(
        { error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ' },
        { status: 400 }
      );
    }

    if (!supabaseUrl || !supabaseKey) {
      console.error('‚ùå Supabase not configured');
      return NextResponse.json(
        { error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' },
        { status: 500 }
      );
    }

    const supabase = createClient(supabaseUrl, supabaseKey);

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const { data: currentData } = await supabase
      .from('students')
      .select('id, fullName, telegram_chat_id')
      .eq('id', studentId)
      .single();
    
    console.log('üìä BEFORE UPDATE:', currentData);

    // –û–±–Ω–æ–≤–∏—Ç—å telegram_chat_id –≤ —Ç–∞–±–ª–∏—Ü–µ students
    console.log('üîÑ Updating telegram_chat_id for studentId:', studentId, 'NEW VALUE:', telegramChatId);
    const { data, error } = await supabase
      .from('students')
      .update({ telegram_chat_id: telegramChatId })
      .eq('id', studentId)
      .select('id, fullName, telegram_chat_id');

    if (error) {
      console.error('‚ùå Error updating telegram_chat_id:', error);
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ' + error.message },
        { status: 500 }
      );
    }
    
    console.log('‚úÖ AFTER UPDATE:', data);
    
    if (!data || data.length === 0) {
      console.error('‚ö†Ô∏è UPDATE returned empty array - studentId not found!');
      return NextResponse.json(
        { error: '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ' },
        { status: 404 }
      );
    }

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('‚ùå Error in /api/telegram/link:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
