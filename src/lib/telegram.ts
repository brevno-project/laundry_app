// Telegram Bot API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
import { createClient } from '@supabase/supabase-js';
import { TelegramNotification } from '../types/index';

const TELEGRAM_BOT_TOKEN = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN || '';
const ADMIN_TELEGRAM_CHAT_ID = process.env.NEXT_PUBLIC_TELEGRAM_CHAT_ID || ''; // ID –∞–¥–º–∏–Ω–∞

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
function formatMessage(notification: TelegramNotification): string {
  const { type, userName, userRoom, washCount, paymentType, queueLength, expectedFinishAt } = notification;
  
  const roomInfo = userRoom ? ` (${userRoom})` : '';
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è
  let timeInfo = '';
  if (expectedFinishAt) {
    const date = new Date(expectedFinishAt);
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    timeInfo = `\n‚è∞ –ó–∞–∫–æ–Ω—á–∏—Ç –≤: ${hours}:${minutes}`;
  }
  
  switch (type) {
    case 'joined':
      return `üß∫ *–ù–æ–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏!*\n\nüë§ ${userName}${roomInfo}\nüî¢ –°—Ç–∏—Ä–æ–∫: ${washCount || 1}\nüí∞ –û–ø–ª–∞—Ç–∞: ${paymentType === 'coupon' ? 'üé´ –ö—É–ø–æ–Ω' : 'üíµ –î–µ–Ω—å–≥–∏'}${timeInfo}\n\nüìä –í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: ${queueLength} —á–µ–ª.`;
    
    case 'left':
      return `‚ùå *–ü–æ–∫–∏–Ω—É–ª –æ—á–µ—Ä–µ–¥—å*\n\nüë§ ${userName}${roomInfo}\n\nüìä –û—Å—Ç–∞–ª–æ—Å—å: ${queueLength} —á–µ–ª.`;
    
    case 'washing_started':
      return `üü¢ *–°—Ç–∏—Ä–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!*\n\nüë§ ${userName}${roomInfo}\nüî¢ –°—Ç–∏—Ä–æ–∫: ${washCount || 1}\n\n‚è≥ –ù–µ –∑–∞–±—É–¥—å –≤—ã–¥–∞—Ç—å –∫–ª—é—á!`;
    
    case 'washing_done':
      return `‚úÖ *–°—Ç–∏—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\nüë§ ${userName}${roomInfo}\n\nüîë –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω!`;
    
    case 'admin_call_for_key':
      return `üîî *–í–ê–®–ê –û–ß–ï–†–ï–î–¨!*\n\nüë§ ${userName}${roomInfo}${timeInfo}\n\nüîë –ü–æ–¥–æ–π–¥–∏—Ç–µ –≤ A501 –∑–∞ –∫–ª—é—á–æ–º!\nüíµ –í–æ–∑—å–º–∏—Ç–µ –¥–µ–Ω—å–≥–∏/–∫—É–ø–æ–Ω`;
    
    case 'admin_key_issued':
      return `‚úÖ *–ö–ª—é—á –≤—ã–¥–∞–Ω!*\n\nüë§ ${userName}${roomInfo}${timeInfo}\n\nüß∫ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å—Ç–∏—Ä–∞—Ç—å—Å—è`;
    
    case 'admin_return_key':
      return `‚è∞ *–ü–†–ò–ù–ï–°–ò–¢–ï –ö–õ–Æ–ß!*\n\nüë§ ${userName}${roomInfo}${timeInfo}\n\nüîë –í–µ—Ä–Ω–∏—Ç–µ –∫–ª—é—á –≤ A501 –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!`;
    
    default:
      return `üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏`;
  }
}

// –ü–æ–ª—É—á–∏—Ç—å telegram_chat_id —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã
async function getStudentTelegramChatId(studentId?: string, userRoom?: string): Promise<string | null> {
  console.log(`üîç Searching telegram_chat_id for:`, { studentId, userRoom });
  
  if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Supabase not configured!');
    return null;
  }
  
  const supabase = createClient(supabaseUrl, supabaseKey);
  
  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ –ø–æ studentId
  if (studentId) {
    console.log(`üîç Searching by studentId: ${studentId}`);
    const { data, error } = await supabase
      .from('students')
      .select('id, fullName, room, telegram_chat_id')
      .eq('id', studentId)
      .single();
    
    if (error) {
      console.error(`‚ùå Error searching by studentId:`, error);
    } else {
      console.log(`üìä Found student:`, data);
      if (data?.telegram_chat_id) {
        console.log(`‚úÖ Found telegram_chat_id: ${data.telegram_chat_id}`);
        return data.telegram_chat_id;
      } else {
        console.warn(`‚ö†Ô∏è Student found but telegram_chat_id is empty!`);
      }
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ID, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ –∫–æ–º–Ω–∞—Ç–µ
  if (userRoom) {
    console.log(`üîç Searching by room: ${userRoom}`);
    const { data, error } = await supabase
      .from('students')
      .select('id, fullName, room, telegram_chat_id')
      .eq('room', userRoom)
      .single();
    
    if (error) {
      console.error(`‚ùå Error searching by room:`, error);
    } else {
      console.log(`üìä Found student by room:`, data);
      if (data?.telegram_chat_id) {
        console.log(`‚úÖ Found telegram_chat_id: ${data.telegram_chat_id}`);
        return data.telegram_chat_id;
      } else {
        console.warn(`‚ö†Ô∏è Student found but telegram_chat_id is empty!`);
      }
    }
  }
  
  console.error(`‚ùå telegram_chat_id NOT FOUND for studentId: ${studentId}, room: ${userRoom}`);
  return null;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
async function sendTelegramMessage(chatId: string, message: string): Promise<boolean> {
  if (!TELEGRAM_BOT_TOKEN) {
    console.warn('‚ö†Ô∏è Telegram bot token not configured');
    return false;
  }

  try {
    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'Markdown',
      }),
    });

    if (!response.ok) {
      const error = await response.json();
      console.error('‚ùå Telegram API error:', error);
      return false;
    }

    return true;
  } catch (error) {
    console.error('‚ùå Error sending Telegram message:', error);
    return false;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
export async function sendTelegramNotification(notification: TelegramNotification): Promise<boolean> {
  const message = formatMessage(notification);

  const studentNotifications = [
    'admin_call_for_key',
    'admin_key_issued',
    'admin_return_key',
  ];

  const adminNotifications = [
    'joined',
    'left',
    'washing_started',
    'washing_done',
  ];

  let success = false;

  // 1) –ª–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É
  if (studentNotifications.includes(notification.type)) {
    const studentChatId = await getStudentTelegramChatId(
      notification.studentId,
      notification.userRoom
    );

    if (studentChatId) {
      success = await sendTelegramMessage(studentChatId, message);
      console.log(`‚úÖ sent to student (${notification.type})`);
    } else {
      console.warn(`‚ö†Ô∏è No Telegram for ${notification.userRoom}`);

      // fallback: —Å–æ–æ–±—â–∏—Ç—å –∞–¥–º–∏–Ω—É, —á—Ç–æ —É —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç —Ç–µ–ª–µ–≥–∏
      if (ADMIN_TELEGRAM_CHAT_ID) {
        await sendTelegramMessage(
          ADMIN_TELEGRAM_CHAT_ID,
          `‚ö†Ô∏è –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª Telegram!\n\n${message}`
        );
      }
    }
  }

  // 2) –∞–¥–º–∏–Ω—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  if (adminNotifications.includes(notification.type)) {
    if (ADMIN_TELEGRAM_CHAT_ID) {
      let prefix = '';

      // —Å–ø–µ—Ü–ª–æ–≥–∏–∫–∞ –¥–ª—è "joined":
      // —Å—Ä–∞–∑—É –≥–æ–≤–æ—Ä–∏–º –∞–¥–º–∏–Ω—É, –µ—Å—Ç—å –ª–∏ —É —Å—Ç—É–¥–µ–Ω—Ç–∞ —Ç–µ–ª–µ–≥–∞
      if (notification.type === 'joined') {
        const studentChatId = await getStudentTelegramChatId(
          notification.studentId,
          notification.userRoom
        );
        if (!studentChatId) {
          prefix = '‚ö†Ô∏è –£ –Ω–µ–≥–æ –ù–ï–¢ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!\n\n';
        }
      }

      success = await sendTelegramMessage(
        ADMIN_TELEGRAM_CHAT_ID,
        `${prefix}${message}`
      );

      console.log(`‚úÖ sent to admin (${notification.type})`);
    }
  }

  return success;
}



// –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
export async function sendTestNotification(): Promise<boolean> {
  return sendTelegramNotification({
    type: 'joined',
    userName: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    userRoom: 'A501',
    washCount: 2,
    paymentType: 'money',
    queueLength: 5,
  });
}
