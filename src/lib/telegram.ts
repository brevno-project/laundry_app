// Telegram Bot API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
import { createClient } from '@supabase/supabase-js';

const TELEGRAM_BOT_TOKEN = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN || '';
const ADMIN_TELEGRAM_CHAT_ID = process.env.NEXT_PUBLIC_TELEGRAM_CHAT_ID || ''; // ID –∞–¥–º–∏–Ω–∞

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';

export interface TelegramNotification {
  type: 'joined' | 'left' | 'washing_started' | 'washing_done' | 'admin_call_for_key' | 'admin_key_issued' | 'admin_return_key';
  userName: string;
  userRoom?: string;
  washCount?: number;
  paymentType?: string;
  queueLength?: number;
  position?: number;
  studentId?: string; // ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –µ–≥–æ telegram_chat_id
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
function formatMessage(notification: TelegramNotification): string {
  const { type, userName, userRoom, washCount, paymentType, queueLength } = notification;
  
  const roomInfo = userRoom ? ` (${userRoom})` : '';
  
  switch (type) {
    case 'joined':
      return `üß∫ *–ù–æ–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏!*\n\nüë§ ${userName}${roomInfo}\nüî¢ –°—Ç–∏—Ä–æ–∫: ${washCount || 1}\nüí∞ –û–ø–ª–∞—Ç–∞: ${paymentType === 'coupon' ? 'üé´ –ö—É–ø–æ–Ω' : 'üíµ –î–µ–Ω—å–≥–∏'}\n\nüìä –í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: ${queueLength} —á–µ–ª.`;
    
    case 'left':
      return `‚ùå *–ü–æ–∫–∏–Ω—É–ª –æ—á–µ—Ä–µ–¥—å*\n\nüë§ ${userName}${roomInfo}\n\nüìä –û—Å—Ç–∞–ª–æ—Å—å: ${queueLength} —á–µ–ª.`;
    
    case 'washing_started':
      return `üü¢ *–°—Ç–∏—Ä–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!*\n\nüë§ ${userName}${roomInfo}\nüî¢ –°—Ç–∏—Ä–æ–∫: ${washCount || 1}\n\n‚è≥ –ù–µ –∑–∞–±—É–¥—å –≤—ã–¥–∞—Ç—å –∫–ª—é—á!`;
    
    case 'washing_done':
      return `‚úÖ *–°—Ç–∏—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\nüë§ ${userName}${roomInfo}\n\nüîë –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω!`;
    
    case 'admin_call_for_key':
      return `üîî *–í–ê–®–ê –û–ß–ï–†–ï–î–¨!*\n\nüë§ ${userName}${roomInfo}\n\nüîë –ü–æ–¥–æ–π–¥–∏—Ç–µ –≤ A501 –∑–∞ –∫–ª—é—á–æ–º!\nüíµ –í–æ–∑—å–º–∏—Ç–µ –¥–µ–Ω—å–≥–∏/–∫—É–ø–æ–Ω`;
    
    case 'admin_key_issued':
      return `‚úÖ *–ö–ª—é—á –≤—ã–¥–∞–Ω!*\n\nüë§ ${userName}${roomInfo}\n\nüß∫ –ú–æ–∂–µ—Ç–µ –∏–¥—Ç–∏ –∫ –º–∞—à–∏–Ω–∫–µ`;
    
    case 'admin_return_key':
      return `‚è∞ *–ü–†–ò–ù–ï–°–ò–¢–ï –ö–õ–Æ–ß!*\n\nüë§ ${userName}${roomInfo}\n\nüîë –í–µ—Ä–Ω–∏—Ç–µ –∫–ª—é—á –≤ A501 –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!`;
    
    default:
      return `üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏`;
  }
}

// –ü–æ–ª—É—á–∏—Ç—å telegram_chat_id —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã
async function getStudentTelegramChatId(studentId?: string, userRoom?: string): Promise<string | null> {
  if (!supabaseUrl || !supabaseKey) return null;
  
  const supabase = createClient(supabaseUrl, supabaseKey);
  
  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ –ø–æ studentId
  if (studentId) {
    const { data, error } = await supabase
      .from('students')
      .select('telegram_chat_id')
      .eq('id', studentId)
      .single();
    
    if (!error && data?.telegram_chat_id) {
      console.log(`‚úÖ Found telegram_chat_id by studentId: ${studentId}`);
      return data.telegram_chat_id;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ID, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ –∫–æ–º–Ω–∞—Ç–µ
  if (userRoom) {
    const { data, error } = await supabase
      .from('students')
      .select('telegram_chat_id')
      .eq('room', userRoom)
      .single();
    
    if (!error && data?.telegram_chat_id) {
      console.log(`‚úÖ Found telegram_chat_id by room: ${userRoom}`);
      return data.telegram_chat_id;
    }
    
    console.warn(`‚ö†Ô∏è telegram_chat_id not found for room: ${userRoom}, studentId: ${studentId}`);
  }
  
  return null;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
async function sendTelegramMessage(chatId: string, message: string): Promise<boolean> {
  if (!TELEGRAM_BOT_TOKEN) {
    console.warn('‚ö†Ô∏è Telegram bot token not configured');
    return false;
  }

  try {
    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'Markdown',
      }),
    });

    if (!response.ok) {
      const error = await response.json();
      console.error('‚ùå Telegram API error:', error);
      return false;
    }

    return true;
  } catch (error) {
    console.error('‚ùå Error sending Telegram message:', error);
    return false;
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
export async function sendTelegramNotification(notification: TelegramNotification): Promise<boolean> {
  const message = formatMessage(notification);
  
  // –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –°–¢–£–î–ï–ù–¢–ê (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ)
  const studentNotifications = ['admin_call_for_key', 'admin_key_issued', 'admin_return_key'];
  
  // –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ê–î–ú–ò–ù–ê
  const adminNotifications = ['joined', 'left', 'washing_started', 'washing_done'];
  
  let success = false;
  
  // –ï—Å–ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ - –Ω–∞–π—Ç–∏ –µ–≥–æ chat_id –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ï–ú–£
  if (studentNotifications.includes(notification.type)) {
    const studentChatId = await getStudentTelegramChatId(notification.studentId, notification.userRoom);
    
    if (studentChatId) {
      success = await sendTelegramMessage(studentChatId, message);
      if (success) {
        console.log(`‚úÖ Telegram notification sent to student (${notification.type})`);
      } else {
        console.warn('‚ö†Ô∏è Failed to send notification to student');
      }
    } else {
      console.warn(`‚ö†Ô∏è Student Telegram not linked (room: ${notification.userRoom})`);
      // –í—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É –∫–∞–∫ fallback
      if (ADMIN_TELEGRAM_CHAT_ID) {
        await sendTelegramMessage(ADMIN_TELEGRAM_CHAT_ID, `‚ö†Ô∏è –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª Telegram!\n\n${message}`);
      }
    }
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ê–î–ú–ò–ù–£
  if (adminNotifications.includes(notification.type)) {
    if (ADMIN_TELEGRAM_CHAT_ID) {
      success = await sendTelegramMessage(ADMIN_TELEGRAM_CHAT_ID, message);
      if (success) {
        console.log(`‚úÖ Telegram notification sent to admin (${notification.type})`);
      }
    }
  }
  
  return success;
}

// –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
export async function sendTestNotification(): Promise<boolean> {
  return sendTelegramNotification({
    type: 'joined',
    userName: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    userRoom: 'A501',
    washCount: 2,
    paymentType: 'money',
    queueLength: 5,
  });
}
