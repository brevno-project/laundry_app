import type { NextApiRequest, NextApiResponse } from 'next';

const BOT_TOKEN = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN || '';

interface TelegramUpdate {
  update_id: number;
  message?: {
    message_id: number;
    from?: {
      id: number;
      first_name: string;
      last_name?: string;
      username?: string;
    };
    chat: {
      id: number;
      type: string;
    };
    text?: string;
  };
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendMessage(chatId: number, text: string) {
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
  
  try {
    await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'Markdown',
      }),
    });
  } catch (error) {
    console.error('Error sending message:', error);
  }
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'GET') {
    return res.status(200).json({
      status: 'ok',
      message: 'Telegram webhook is active (Pages API)',
      bot: '@keiin_dorm_laundry_bot',
    });
  }

  if (req.method === 'POST') {
    try {
      const update: TelegramUpdate = req.body;
      
      console.log('üì® Received update:', update.update_id);

      if (!update.message || !update.message.text) {
        return res.status(200).json({ ok: true });
      }

      const { message } = update;
      const chatId = message.chat.id;
      const text = message.text;
      const firstName = message.from?.first_name || '–¥—Ä—É–≥';

      console.log(`üí¨ Message from ${firstName} (${chatId}): ${text}`);

      if (text === '/start') {
        const responseText = (
          `üëã *–ü—Ä–∏–≤–µ—Ç, ${firstName}!*\n\n` +
          `üîë *–í–∞—à Chat ID:*\n` +
          `\`${chatId}\`\n\n` +
          `üì± *–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:*\n` +
          `1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —á–∏—Å–ª–æ –≤—ã—à–µ\n` +
          `2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏\n` +
          `3Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ Chat ID –≤ –ø–æ–ª–µ\n` +
          `4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'\n\n` +
          `‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!`
        );
        await sendMessage(chatId, responseText);
      } else if (text === '/help') {
        const helpText = (
          `üß∫ *–ë–æ—Ç –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Å—Ç–∏—Ä–∫—É*\n\n` +
          `*–ö–æ–º–∞–Ω–¥—ã:*\n` +
          `/start - –ü–æ–ª—É—á–∏—Ç—å Chat ID\n` +
          `/help - –°–ø—Ä–∞–≤–∫–∞`
        );
        await sendMessage(chatId, helpText);
      } else {
        await sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Chat ID');
      }

      return res.status(200).json({ ok: true });
    } catch (error) {
      console.error('‚ùå Error:', error);
      return res.status(500).json({ error: 'Internal error' });
    }
  }

  return res.status(405).json({ error: 'Method not allowed' });
}
