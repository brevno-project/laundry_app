"use client";

import { useState, useEffect } from 'react';
import { useLaundry } from '@/contexts/LaundryContext';
import { MachineStatus as MachineStatusEnum } from '@/types';
import { formatDate } from '@/contexts/LaundryContext';

export default function MachineStatus() {
  const { machineState, queue } = useLaundry();
  const [timeRemaining, setTimeRemaining] = useState<string | null>(null);

  // Calculate time remaining for washing machine
  useEffect(() => {
    if (
      machineState.status === MachineStatusEnum.WASHING &&
      machineState.expectedFinishAt
    ) {
      const intervalId = setInterval(() => {
        const now = new Date();
        const expectedFinish = new Date(machineState.expectedFinishAt!);
        
        if (now >= expectedFinish) {
          setTimeRemaining('Done');
        } else {
          const diffMs = expectedFinish.getTime() - now.getTime();
          const diffMins = Math.floor(diffMs / 60000);
          const diffSecs = Math.floor((diffMs % 60000) / 1000);
          
          setTimeRemaining(`${diffMins}:${diffSecs < 10 ? '0' : ''}${diffSecs}`);
        }
      }, 1000);
      
      return () => clearInterval(intervalId);
    }
    
    // Reset when not washing
    setTimeRemaining(null);
    return undefined;
  }, [machineState]);

  // Find current washing user from queue (not just machineState)
  const currentWashingItem = queue.find((item) => item.status === 'washing');
  
  // Check if machine is actually in use
  const isWashing = !!currentWashingItem;

  // Render appropriate status card
  if (isWashing && currentWashingItem) {
    return (
      <div className="bg-blue-600 p-6 rounded-lg shadow-lg mb-6 border-2 border-blue-700">
        <h2 className="text-2xl font-bold text-white mb-3">üß∫ –ú–∞—à–∏–Ω–∞ –∑–∞–Ω—è—Ç–∞</h2>
        <p className="text-blue-100 text-lg mb-2">–°–µ–π—á–∞—Å —Å—Ç–∏—Ä–∞–µ—Ç:</p>
        <p className="text-lg">
          <span className="font-bold">–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</span> {currentWashingItem.userName}
          {currentWashingItem.userRoom && ` (–ö–æ–º–Ω–∞—Ç–∞ ${currentWashingItem.userRoom})`}
        </p>
        {machineState.startedAt && (
          <p className="text-white text-xl mb-1">
            <strong>–ù–∞—á–∞–ª–æ:</strong> {formatDate(currentWashingItem.joinedAt)}
          </p>
        )}
        {currentWashingItem.expectedFinishAt && (
          <>
            <p className="text-white text-xl">
              <strong>–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ:</strong> {formatDate(currentWashingItem.expectedFinishAt)}
            </p>
            {timeRemaining && (
              <p className="text-2xl font-bold text-yellow-300 mt-2 bg-blue-700 p-3 rounded-md">
                <strong>–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</strong> {timeRemaining}
              </p>
            )}
          </>
        )}
      </div>
    );
  }

  return (
    <div className="bg-green-600 p-6 rounded-lg shadow-lg mb-6 border-2 border-green-700">
      <h2 className="text-2xl font-bold text-white mb-2">‚úÖ –ú–∞—à–∏–Ω–∞ —Å–≤–æ–±–æ–¥–Ω–∞</h2>
      <p className="text-green-100 text-lg">–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.</p>
    </div>
  );
}
