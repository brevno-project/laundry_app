"use client";

import { useState } from 'react';
import { useLaundry } from '@/contexts/LaundryContext';
import { Student } from '@/types';

export default function AdminPanel() {
  const { 
    isAdmin, 
    setIsAdmin, 
    verifyAdminKey, 
    queue,
    students,
    markDone, 
    startNext, 
    clearQueue,
    resetStudentRegistration,
    banStudent,
    unbanStudent,
    addStudent,
    updateStudent,
    deleteStudent,
    updateAdminKey,
    adminAddToQueue,
  } = useLaundry();
  
  const [adminKey, setAdminKey] = useState('');
  const [showConfirmClear, setShowConfirmClear] = useState(false);
  const [showStudents, setShowStudents] = useState(false);
  const [error, setError] = useState('');
  
  // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  const [showAddStudent, setShowAddStudent] = useState(false);
  const [showEditStudent, setShowEditStudent] = useState(false);
  const [showBanStudent, setShowBanStudent] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [showUpdateKey, setShowUpdateKey] = useState(false);
  const [showResetConfirm, setShowResetConfirm] = useState(false);
  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);
  const [showAddToQueue, setShowAddToQueue] = useState(false);
  
  // ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å (–≤–∫–ª—é—á–∞—è –¥–∞—Ç—É)
  const [queueWashCount, setQueueWashCount] = useState(1);
  const [queuePaymentType, setQueuePaymentType] = useState('money');
  const [queueHour, setQueueHour] = useState('20');
  const [queueMinute, setQueueMinute] = useState('00');
  const [queueDate, setQueueDate] = useState(''); // ‚úÖ –ù–û–í–û–ï –ü–û–õ–ï
  
  // –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
  const [newFirstName, setNewFirstName] = useState('');
  const [newLastName, setNewLastName] = useState('');
  const [newRoom, setNewRoom] = useState('');
  
  // –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
  const [editFirstName, setEditFirstName] = useState('');
  const [editLastName, setEditLastName] = useState('');
  const [editRoom, setEditRoom] = useState('');
  
  // –§–æ—Ä–º–∞ –±–∞–Ω–∞
  const [banReason, setBanReason] = useState('');
  
  // –§–æ—Ä–º–∞ —Å–º–µ–Ω—ã –∫–ª—é—á–∞
  const [newAdminKey, setNewAdminKey] = useState('');
  const [confirmAdminKey, setConfirmAdminKey] = useState('');
  
  // –ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
  const [searchQuery, setSearchQuery] = useState('');
  const [filterStatus, setFilterStatus] = useState<'all' | 'registered' | 'unregistered' | 'banned'>('all');
  
  const washingItem = queue.find(item => item.status === 'washing');

  // ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç (—Å–µ–≥–æ–¥–Ω—è + 7 –¥–Ω–µ–π)
  const getAvailableDates = () => {
    const dates = [];
    const today = new Date();
    
    for (let i = 0; i < 8; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      const dateStr = date.toISOString().slice(0, 10);
      
      const dayNames = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
      const dayName = dayNames[date.getDay()];
      const day = date.getDate();
      const month = date.getMonth() + 1;
      
      let label = `${dayName}, ${day}.${month.toString().padStart(2, '0')}`;
      if (i === 0) label += ' (–°–µ–≥–æ–¥–Ω—è)';
      if (i === 1) label += ' (–ó–∞–≤—Ç—Ä–∞)';
      
      dates.push({ value: dateStr, label });
    }
    
    return dates;
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
  const filteredStudents = students.filter(student => {
    const matchesSearch = student.fullName.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         (student.room && student.room.toLowerCase().includes(searchQuery.toLowerCase()));
    
    const matchesFilter = 
      filterStatus === 'all' ? true :
      filterStatus === 'registered' ? student.isRegistered :
      filterStatus === 'unregistered' ? !student.isRegistered :
      filterStatus === 'banned' ? student.is_banned : true;
    
    return matchesSearch && matchesFilter;
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const handleAdminLogin = () => {
    if (adminKey.trim() === '') {
      setError('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      return;
    }
    
    const isValid = verifyAdminKey(adminKey.trim());
    if (!isValid) {
      setError('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á');
    } else {
      setError('');
    }
  };

  const handleAdminLogout = () => {
    setIsAdmin(false);
    setAdminKey('');
  };

  const handleClearQueueConfirm = () => {
    clearQueue();
    setShowConfirmClear(false);
  };

  const openResetConfirm = (student: Student) => {
    setSelectedStudent(student);
    setShowResetConfirm(true);
  };

  const handleResetStudent = async () => {
    if (!selectedStudent) return;
    
    try {
      await resetStudentRegistration(selectedStudent.id);
      setShowResetConfirm(false);
      setSelectedStudent(null);
      alert('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞!');
    } catch (err: any) {
      console.error('Error resetting student:', err);
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }
  };

  const handleAddStudent = async () => {
    if (!newFirstName || !newLastName) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é');
      return;
    }
    
    try {
      await addStudent(newFirstName, newLastName, newRoom || undefined);
      setShowAddStudent(false);
      setNewFirstName('');
      setNewLastName('');
      setNewRoom('');
      alert('‚úÖ –°—Ç—É–¥–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!');
    } catch (err: any) {
      alert('‚ùå –û—à–∏–±–∫–∞: ' + err.message);
    }
  };

  const handleEditStudent = async () => {
    if (!selectedStudent) return;
    
    try {
      await updateStudent(selectedStudent.id, {
        firstName: editFirstName || undefined,
        lastName: editLastName || undefined,
        room: editRoom || undefined,
      });
      setShowEditStudent(false);
      setSelectedStudent(null);
      alert('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
    } catch (err: any) {
      alert('‚ùå –û—à–∏–±–∫–∞: ' + err.message);
    }
  };

  const handleBanStudent = async () => {
    if (!selectedStudent) return;
    
    try {
      await banStudent(selectedStudent.id, banReason || '–ù–µ —É–∫–∞–∑–∞–Ω–æ');
      setShowBanStudent(false);
      setSelectedStudent(null);
      setBanReason('');
      alert('‚úÖ –°—Ç—É–¥–µ–Ω—Ç –∑–∞–±–∞–Ω–µ–Ω!');
    } catch (err: any) {
      alert('‚ùå –û—à–∏–±–∫–∞: ' + err.message);
    }
  };

  const handleUnbanStudent = async (studentId: string) => {
    try {
      await unbanStudent(studentId);
      alert('‚úÖ –°—Ç—É–¥–µ–Ω—Ç —Ä–∞–∑–±–∞–Ω–µ–Ω!');
    } catch (err: any) {
      alert('‚ùå –û—à–∏–±–∫–∞: ' + err.message);
    }
  };

  const handleDeleteStudent = async () => {
    if (!selectedStudent) return;
    
    try {
      await deleteStudent(selectedStudent.id);
      setShowDeleteConfirm(false);
      setSelectedStudent(null);
      alert('‚úÖ –°—Ç—É–¥–µ–Ω—Ç —É–¥–∞–ª—ë–Ω!');
    } catch (err: any) {
      alert('‚ùå –û—à–∏–±–∫–∞: ' + err.message);
    }
  };

  const handleUpdateAdminKey = async () => {
    if (newAdminKey.length < 6) {
      alert('–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
      return;
    }
    
    if (newAdminKey !== confirmAdminKey) {
      alert('–ö–ª—é—á–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      return;
    }
    
    try {
      await updateAdminKey(newAdminKey);
      setShowUpdateKey(false);
      setNewAdminKey('');
      setConfirmAdminKey('');
    } catch (err: any) {
      alert('‚ùå –û—à–∏–±–∫–∞: ' + err.message);
    }
  };

  const openEditModal = (student: Student) => {
    setSelectedStudent(student);
    setEditFirstName(student.firstName);
    setEditLastName(student.lastName);
    setEditRoom(student.room || '');
    setShowEditStudent(true);
  };

  const openBanModal = (student: Student) => {
    setSelectedStudent(student);
    setBanReason('');
    setShowBanStudent(true);
  };

  const openDeleteModal = (student: Student) => {
    setSelectedStudent(student);
    setShowDeleteConfirm(true);
  };

  // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –° –í–´–ë–û–†–û–ú –î–ê–¢–´
  const handleAddToQueue = async () => {
    if (!selectedStudent) return;
    
    try {
      const today = new Date();
      today.setHours(parseInt(queueHour), parseInt(queueMinute), 0, 0);
      const expectedFinishAt = today.toISOString();
      
      await adminAddToQueue(
        selectedStudent.fullName, 
        selectedStudent.room || undefined,
        queueWashCount,
        queuePaymentType,
        expectedFinishAt,
        queueDate
      );
      
      setShowAddToQueue(false);
      alert('‚úÖ –°—Ç—É–¥–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å!');
    } catch (err: any) {
      alert('‚ùå –û—à–∏–±–∫–∞: ' + err.message);
    }
  };



  const openAddToQueueModal = (student: Student) => {
    setSelectedStudent(student);
    setQueueWashCount(1);
    setQueuePaymentType('money');
    setQueueHour('20');
    setQueueMinute('00');
    const today = new Date().toISOString().slice(0, 10);
    setQueueDate(today); // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    setShowAddToQueue(true);
  };

  if (!isAdmin) {
    return (
      <div className="bg-white p-6 rounded-lg shadow-lg border border-gray-200">
        <h2 className="text-2xl font-bold mb-4 text-gray-800">üîí –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</h2>
        <div className="space-y-4">
          <div>
            <label htmlFor="adminKey" className="block text-sm font-bold mb-2 text-gray-700">
              –ö–ª—é—á –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            </label>
            <input
              id="adminKey"
              type="password"
              value={adminKey}
              onChange={(e) => setAdminKey(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleAdminLogin()}
              className="mt-1 block w-full rounded-md border-2 border-gray-300 shadow-sm p-3 text-gray-900 placeholder-gray-400 focus:border-purple-500 focus:ring-2 focus:ring-purple-200"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á"
            />
            {error && <p className="mt-2 text-red-600 text-sm font-semibold">{error}</p>}
          </div>
          <button
            onClick={handleAdminLogin}
            className="w-full bg-purple-600 text-white font-semibold py-3 px-4 rounded-md hover:bg-purple-700 transition-colors shadow-md"
          >
            –í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-purple-700 p-6 rounded-lg shadow-lg border-2 border-purple-800">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-bold text-white">üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞</h2>
        <button
          onClick={handleAdminLogout}
          className="bg-purple-800 hover:bg-purple-900 text-white text-sm font-semibold px-3 py-2 rounded transition-colors"
        >
          üö™ –í—ã–π—Ç–∏
        </button>
      </div>
      
      <div className="space-y-4">
        
        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é */}
        {!showConfirmClear ? (
          <button
            onClick={() => setShowConfirmClear(true)}
            className="w-full bg-red-600 text-white font-semibold py-3 px-4 rounded-md hover:bg-red-700 transition-colors shadow-md"
          >
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å
          </button>
        ) : (
          <div className="bg-white p-4 rounded-md border-2 border-red-400">
            <p className="text-red-700 font-bold text-base mb-3">‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –æ—á–µ—Ä–µ–¥—å?</p>
            <div className="flex gap-2">
              <button
                onClick={() => setShowConfirmClear(false)}
                className="flex-1 bg-gray-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-gray-700 transition-colors"
              >
                ‚ùå –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={handleClearQueueConfirm}
                className="flex-1 bg-red-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-red-700 transition-colors"
              >
                ‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å
              </button>
            </div>
          </div>
        )}

        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ */}
        <button
          onClick={() => setShowStudents(!showStudents)}
          className="w-full bg-purple-800 text-white font-semibold py-3 px-4 rounded-md hover:bg-purple-900 transition-colors shadow-md"
        >
          üë• {showStudents ? '–°–∫—Ä—ã—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤' : '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏'}
        </button>

        {showStudents && (
          <div className="bg-white p-4 rounded-md space-y-4">
            <div className="flex justify-between items-center">
              <h3 className="text-lg font-bold text-gray-800">–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ ({filteredStudents.length})</h3>
              <button
                onClick={() => setShowAddStudent(true)}
                className="bg-green-600 text-white text-sm font-semibold py-2 px-4 rounded hover:bg-green-700"
              >
                ‚ûï –î–æ–±–∞–≤–∏—Ç—å
              </button>
            </div>

            {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
            <div className="space-y-2">
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="üîç –ü–æ–∏—Å–∫..."
                className="w-full border-2 border-gray-300 rounded-lg p-2 text-gray-900"
              />
              
              <div className="grid grid-cols-4 gap-2">
                <button
                  onClick={() => setFilterStatus('all')}
                  className={`py-2 px-2 rounded text-xs font-semibold ${filterStatus === 'all' ? 'bg-purple-600 text-white' : 'bg-gray-200 text-gray-700'}`}
                >
                  –í—Å–µ
                </button>
                <button
                  onClick={() => setFilterStatus('registered')}
                  className={`py-2 px-2 rounded text-xs font-semibold ${filterStatus === 'registered' ? 'bg-green-600 text-white' : 'bg-gray-200 text-gray-700'}`}
                >
                  –ó–∞—Ä–µ–≥.
                </button>
                <button
                  onClick={() => setFilterStatus('unregistered')}
                  className={`py-2 px-2 rounded text-xs font-semibold ${filterStatus === 'unregistered' ? 'bg-yellow-600 text-white' : 'bg-gray-200 text-gray-700'}`}
                >
                  –ù–µ –∑–∞—Ä.
                </button>
                <button
                  onClick={() => setFilterStatus('banned')}
                  className={`py-2 px-2 rounded text-xs font-semibold ${filterStatus === 'banned' ? 'bg-red-600 text-white' : 'bg-gray-200 text-gray-700'}`}
                >
                  –ë–∞–Ω—ã
                </button>
              </div>
            </div>

            {/* –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ */}
            <div className="max-h-96 overflow-y-auto space-y-3">
              {filteredStudents.map((student) => (
                <div key={student.id} className="border-2 border-gray-200 rounded-lg bg-gray-50 p-3 space-y-2">
                  {/* –ò–º—è –∏ –∑–Ω–∞—á–∫–∏ */}
                  <div>
                    <p className="font-bold text-gray-900 text-base">
                      {student.fullName}
                      {student.room && <span className="text-gray-600 text-sm ml-2">({student.room})</span>}
                    </p>
                    <div className="flex gap-1 mt-1 flex-wrap">
                      {student.isRegistered && (
                        <span className="text-xs bg-green-100 text-green-800 px-2 py-0.5 rounded font-semibold">‚úÖ –ó–∞—Ä–µ–≥.</span>
                      )}
                      {student.is_banned && (
                        <span className="text-xs bg-red-100 text-red-800 px-2 py-0.5 rounded font-semibold">üö´ –ë–∞–Ω</span>
                      )}
                      {student.telegram_chat_id && (
                        <span className="text-xs bg-blue-100 text-blue-800 px-2 py-0.5 rounded font-semibold">üì± TG</span>
                      )}
                    </div>
                  </div>
                  
                  {/* –ü–ï–†–í–ê–Ø –ö–ù–û–ü–ö–ê - –ü–û–°–¢–ê–í–ò–¢–¨ –í –û–ß–ï–†–ï–î–¨ */}
                  <button
                    onClick={() => openAddToQueueModal(student)}
                    className="bg-purple-500 text-white text-sm font-semibold py-2 px-3 rounded hover:bg-purple-600 flex items-center justify-center gap-1 w-full"
                  >
                    ‚ûï –ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å
                  </button>

                  {/* –ì–†–£–ü–ü–ê –û–ü–ê–°–ù–´–• –î–ï–ô–°–¢–í–ò–ô */}
                  <div className="flex flex-col gap-1 mt-2">
                    {/* –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –°–±—Ä–æ—Å + –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ */}
                    <div className="grid grid-cols-2 gap-1">
                  {student.isRegistered && (
                      <button
                        onClick={() => openResetConfirm(student)}
                        className="bg-orange-500 text-white text-xs font-semibold py-1 px-2 rounded hover:bg-orange-600"
                        title="–°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
                      >
                        üîÑ –°–±—Ä–æ—Å–∏—Ç—å
                      </button>
                    )}
                    <button
                      onClick={() => openEditModal(student)}
                      className="bg-blue-500 text-white text-xs font-semibold py-1 px-2 rounded hover:bg-blue-600"
                      title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                    >
                      ‚úèÔ∏è –†–µ–¥–∞–∫—Ç.
                    </button>
                    </div>
                    
                    {/* –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –ë–∞–Ω */}
                    <div className="w-full">
                      {student.is_banned ? (
                        <button
                          onClick={() => handleUnbanStudent(student.id)}
                          className="bg-green-500 text-white text-xs font-semibold py-1 px-2 rounded hover:bg-green-600 w-full"
                          title="–†–∞–∑–±–∞–Ω–∏—Ç—å"
                        >
                          ‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å
                        </button>
                      ) : (
                        <button
                          onClick={() => openBanModal(student)}
                          className="bg-red-500 text-white text-xs font-semibold py-1 px-2 rounded hover:bg-red-600 w-full"
                          title="–ó–∞–±–∞–Ω–∏—Ç—å"
                        >
                          üö´ –ó–∞–±–∞–Ω–∏—Ç—å
                        </button>
                      )}
                    </div>
                    
                    {/* –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: –£–¥–∞–ª–µ–Ω–∏–µ */}
                    <button
                      onClick={() => openDeleteModal(student)}
                      className="bg-gray-700 text-white text-xs font-semibold py-1 px-2 rounded hover:bg-gray-800 w-full"
                      title="–£–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞"
                    >
                      üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>



      {/* ========== –í–°–ï –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê ========== */}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ: –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ */}
      {showAddStudent && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-xl font-bold text-gray-900 mb-4">‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞</h3>
            <div className="space-y-3">
              <input
                type="text"
                value={newFirstName}
                onChange={(e) => setNewFirstName(e.target.value)}
                placeholder="–ò–º—è"
                className="w-full border-2 border-gray-300 rounded-lg p-3 text-gray-900"
              />
              <input
                type="text"
                value={newLastName}
                onChange={(e) => setNewLastName(e.target.value)}
                placeholder="–§–∞–º–∏–ª–∏—è"
                className="w-full border-2 border-gray-300 rounded-lg p-3 text-gray-900"
              />
              <input
                type="text"
                value={newRoom}
                onChange={(e) => setNewRoom(e.target.value)}
                placeholder="–ö–æ–º–Ω–∞—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                className="w-full border-2 border-gray-300 rounded-lg p-3 text-gray-900"
              />
            </div>
            <div className="flex gap-2 mt-4">
              <button
                onClick={() => setShowAddStudent(false)}
                className="flex-1 bg-gray-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-gray-700"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={handleAddStudent}
                className="flex-1 bg-green-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-green-700"
              >
                –î–æ–±–∞–≤–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ */}
      {showEditStudent && selectedStudent && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-xl font-bold text-gray-900 mb-4">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</h3>
            <div className="space-y-3">
              <input
                type="text"
                value={editFirstName}
                onChange={(e) => setEditFirstName(e.target.value)}
                placeholder="–ò–º—è"
                className="w-full border-2 border-gray-300 rounded-lg p-3 text-gray-900"
              />
              <input
                type="text"
                value={editLastName}
                onChange={(e) => setEditLastName(e.target.value)}
                placeholder="–§–∞–º–∏–ª–∏—è"
                className="w-full border-2 border-gray-300 rounded-lg p-3 text-gray-900"
              />
              <input
                type="text"
                value={editRoom}
                onChange={(e) => setEditRoom(e.target.value)}
                placeholder="–ö–æ–º–Ω–∞—Ç–∞"
                className="w-full border-2 border-gray-300 rounded-lg p-3 text-gray-900"
              />
            </div>
            <div className="flex gap-2 mt-4">
              <button
                onClick={() => setShowEditStudent(false)}
                className="flex-1 bg-gray-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-gray-700"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={handleEditStudent}
                className="flex-1 bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-700"
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ */}
      {showResetConfirm && selectedStudent && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-xl font-bold text-orange-700 mb-4">‚ö†Ô∏è –°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?</h3>
            <p className="text-gray-700 mb-4">
              –°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è <span className="font-bold">{selectedStudent.fullName}</span>?
            </p>
            <p className="text-orange-600 text-sm font-semibold mb-4">
              –°—Ç—É–¥–µ–Ω—Ç —Å–º–æ–∂–µ—Ç –∑–∞–Ω–æ–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.
            </p>
            <div className="flex gap-2">
              <button
                onClick={() => setShowResetConfirm(false)}
                className="flex-1 bg-gray-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-gray-700"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={handleResetStudent}
                className="flex-1 bg-orange-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-orange-700"
              >
                –°–±—Ä–æ—Å–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ: –ó–∞–±–∞–Ω–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ */}
      {showBanStudent && selectedStudent && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-xl font-bold text-gray-900 mb-4">üö´ –ó–∞–±–∞–Ω–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞</h3>
            <p className="text-gray-700 mb-3">
              –ó–∞–±–∞–Ω–∏—Ç—å <span className="font-bold">{selectedStudent.fullName}</span>?
            </p>
            <textarea
              value={banReason}
              onChange={(e) => setBanReason(e.target.value)}
              placeholder="–ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              className="w-full border-2 border-gray-300 rounded-lg p-3 text-gray-900 h-24"
            />
            <div className="flex gap-2 mt-4">
              <button
                onClick={() => setShowBanStudent(false)}
                className="flex-1 bg-gray-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-gray-700"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={handleBanStudent}
                className="flex-1 bg-red-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-red-700"
              >
                –ó–∞–±–∞–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ: –£–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ */}
      {showDeleteConfirm && selectedStudent && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-xl font-bold text-red-700 mb-4">‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞?</h3>
            <p className="text-gray-700 mb-4">
              –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å <span className="font-bold">{selectedStudent.fullName}</span>?
            </p>
            <p className="text-red-600 text-sm font-semibold mb-4">
              ‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å! –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞.
            </p>
            <div className="flex gap-2">
              <button
                onClick={() => setShowDeleteConfirm(false)}
                className="flex-1 bg-gray-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-gray-700"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={handleDeleteStudent}
                className="flex-1 bg-red-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-red-700"
              >
                –£–¥–∞–ª–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ: –°–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω-–∫–ª—é—á */}
      {showUpdateKey && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-xl font-bold text-gray-900 mb-4">üîë –°–º–µ–Ω–∏—Ç—å –∞–¥–º–∏–Ω-–∫–ª—é—á</h3>
            <div className="space-y-3">
              <input
                type="password"
                value={newAdminKey}
                onChange={(e) => setNewAdminKey(e.target.value)}
                placeholder="–ù–æ–≤—ã–π –∫–ª—é—á (–º–∏–Ω. 6 —Å–∏–º–≤–æ–ª–æ–≤)"
                className="w-full border-2 border-gray-300 rounded-lg p-3 text-gray-900"
              />
              <input
                type="password"
                value={confirmAdminKey}
                onChange={(e) => setConfirmAdminKey(e.target.value)}
                placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∫–ª—é—á"
                className="w-full border-2 border-gray-300 rounded-lg p-3 text-gray-900"
              />
            </div>
            <p className="text-red-600 text-sm mt-2">‚ö†Ô∏è –ü–æ—Å–ª–µ —Å–º–µ–Ω—ã –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞</p>
            <div className="flex gap-2 mt-4">
              <button
                onClick={() => setShowUpdateKey(false)}
                className="flex-1 bg-gray-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-gray-700"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={handleUpdateAdminKey}
                className="flex-1 bg-yellow-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-yellow-700"
              >
                –°–º–µ–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* ‚úÖ –ì–õ–ê–í–ù–û–ï –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û: –ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –° –í–´–ë–û–†–û–ú –î–ê–¢–´ */}
      {showAddToQueue && selectedStudent && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-xl font-bold text-gray-900 mb-4">‚ûï –ü–æ—Å—Ç–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å</h3>
            <p className="text-gray-700 mb-3">
              –°—Ç—É–¥–µ–Ω—Ç: <span className="font-bold">{selectedStudent.fullName}</span>
            </p>
            
            <div className="space-y-3">
              {/* ‚úÖ –ù–û–í–û–ï –ü–û–õ–ï: –í—ã–±–æ—Ä –¥–∞—Ç—ã —Å—Ç–∏—Ä–∫–∏ */}
              <div>
                <label className="block text-sm font-bold mb-2 text-gray-900">üìÖ –î–∞—Ç–∞ —Å—Ç–∏—Ä–∫–∏</label>
                <select
                  value={queueDate}
                  onChange={(e) => setQueueDate(e.target.value)}
                  className="w-full border-2 border-gray-300 rounded-lg p-2 text-gray-900"
                >
                  {getAvailableDates().map(date => (
                    <option key={date.value} value={date.value}>
                      {date.label}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-bold mb-2 text-gray-900">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∏—Ä–æ–∫</label>
                <input
                  type="number"
                  min="1"
                  max="10"
                  value={queueWashCount}
                  onChange={(e) => setQueueWashCount(Number(e.target.value))}
                  className="w-full border-2 border-gray-300 rounded-lg p-2 text-gray-900"
                />
              </div>
              
              <div>
                <label className="block text-sm font-bold mb-2 text-gray-900">–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</label>
                <select
                  value={queuePaymentType}
                  onChange={(e) => setQueuePaymentType(e.target.value)}
                  className="w-full border-2 border-gray-300 rounded-lg p-2 text-gray-900"
                >
                  <option value="money">üíµ –î–µ–Ω—å–≥–∏</option>
                  <option value="coupon">üé´ –ö—É–ø–æ–Ω</option>
                  <option value="both">üíµ+üé´ –û–±–∞</option>
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-bold mb-2 text-gray-900">–ó–∞–∫–æ–Ω—á–∏—Ç –≤</label>
                <div className="flex gap-2">
                  <select
                    value={queueHour}
                    onChange={(e) => setQueueHour(e.target.value)}
                    className="flex-1 border-2 border-gray-300 rounded-lg p-2 text-gray-900"
                  >
                    {Array.from({ length: 24 }, (_, i) => i).map(hour => (
                      <option key={hour} value={hour.toString().padStart(2, '0')}>
                        {hour.toString().padStart(2, '0')}
                      </option>
                    ))}
                  </select>
                  <span className="text-2xl text-gray-900">:</span>
                  <select
                    value={queueMinute}
                    onChange={(e) => setQueueMinute(e.target.value)}
                    className="flex-1 border-2 border-gray-300 rounded-lg p-2 text-gray-900"
                  >
                    {Array.from({ length: 60 }, (_, i) => i).map(minute => (
                      <option key={minute} value={minute.toString().padStart(2, '0')}>
                        {minute.toString().padStart(2, '0')}
                      </option>
                    ))}
                  </select>
                </div>
              </div>
            </div>
            
            <div className="flex gap-2 mt-4">
              <button
                onClick={() => setShowAddToQueue(false)}
                className="flex-1 bg-gray-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-gray-700"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={handleAddToQueue}
                className="flex-1 bg-purple-600 text-white font-semibold py-2 px-4 rounded-lg hover:bg-purple-700"
              >
                –î–æ–±–∞–≤–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}