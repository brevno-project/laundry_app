"use client";

import { useState } from 'react';
import { useLaundry } from '@/contexts/LaundryContext';
import { QueueStatus } from '@/types';
import { formatDate } from '@/contexts/LaundryContext';
import { sendTelegramNotification } from '@/lib/telegram';

export default function QueueList() {
  const { 
    queue, 
    user, 
    leaveQueue, 
    updateQueueItem, 
    sendAdminMessage,
    setQueueStatus,
    removeFromQueue,
    startWashing,
    cancelWashing,
    markDone,
    isAdmin,
    machineState
  } = useLaundry();
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
  const getStatusDisplay = (status: QueueStatus) => {
    switch(status) {
      case QueueStatus.WAITING:
        return { bg: 'bg-gray-50', text: 'text-gray-700', badge: '‚è≥ –û–∂–∏–¥–∞–µ—Ç', badgeColor: 'bg-gray-200 text-gray-700' };
      case QueueStatus.READY:
        return { bg: 'bg-yellow-50', text: 'text-yellow-900', badge: 'üü° –°–õ–ï–î–£–Æ–©–ò–ô!', badgeColor: 'bg-yellow-400 text-yellow-900' };
      case QueueStatus.KEY_ISSUED:
        return { bg: 'bg-blue-50', text: 'text-blue-900', badge: 'üîë –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å—Ç–∏—Ä–∞—Ç—å—Å—è', badgeColor: 'bg-blue-400 text-blue-900' };
      case QueueStatus.WASHING:
        return { bg: 'bg-green-50', text: 'text-green-900', badge: 'üü¢ –°–¢–ò–†–ê–ï–¢', badgeColor: 'bg-green-400 text-green-900' };
      case QueueStatus.DONE:
        return { bg: 'bg-emerald-50', text: 'text-emerald-900', badge: '‚úÖ –ü–û–°–¢–ò–†–ê–õ–°–Ø', badgeColor: 'bg-emerald-400 text-emerald-900' };
      default:
        return { bg: 'bg-white', text: 'text-gray-700', badge: status, badgeColor: 'bg-gray-200' };
    }
  };
  
  // Queue items including washing and done
  const queuedItems = queue.filter(item => 
    item.status === QueueStatus.WAITING || 
    item.status === QueueStatus.READY || 
    item.status === QueueStatus.KEY_ISSUED || 
    item.status === QueueStatus.WASHING || 
    item.status === QueueStatus.DONE
  );

  if (queuedItems.length === 0) {
    return (
      <div className="bg-white p-4 rounded-lg shadow-lg border border-gray-200">
        <h2 className="text-xl font-bold mb-2 text-gray-800">üìã –û—á–µ—Ä–µ–¥—å</h2>
      </div>
    );
  }

  console.log('üé∞ Machine State:', machineState);
  
  return (
    <div className="bg-white rounded-lg shadow-lg border border-gray-200">
      <h2 className="text-xl font-bold p-3 bg-gray-50 rounded-t-lg text-gray-800">üìã –û—á–µ—Ä–µ–¥—å ({queuedItems.length})</h2>
      
      {/* –°—Ç–∞—Ç—É—Å –º–∞—à–∏–Ω—ã */}
      <div className="p-3 border-b border-gray-200">
        {machineState.status === 'idle' ? (
          <div className="bg-green-50 border-2 border-green-500 rounded-lg p-3 text-center">
            <div className="text-3xl mb-1">‚úÖ</div>
            <div className="text-lg font-bold text-green-900">–ú–∞—à–∏–Ω–∞ —Å–≤–æ–±–æ–¥–Ω–∞</div>
          </div>
        ) : (
          <div className="bg-red-50 border-2 border-red-500 rounded-lg p-3 text-center">
            <div className="text-3xl mb-1">üî¥</div>
            <div className="text-lg font-bold text-red-900">–ú–∞—à–∏–Ω–∞ –∑–∞–Ω—è—Ç–∞</div>
            {machineState.currentQueueItemId && (() => {
              const currentItem = queue.find(item => item.id === machineState.currentQueueItemId);
              if (currentItem) {
                return (
                  <div className="text-sm text-red-700 mt-1 font-bold">
                    üßë –°—Ç–∏—Ä–∞–µ—Ç: {currentItem.userName}
                  </div>
                );
              }
            })()}
            {machineState.expectedFinishAt && (
              <div className="text-sm text-red-700 mt-1">
                –ó–∞–∫–æ–Ω—á–∏—Ç: {new Date(machineState.expectedFinishAt).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}
              </div>
            )}
          </div>
        )}
      </div>
      
      <div className="p-2 space-y-3">
        {queuedItems.map((item, index) => {
            const isCurrentUser = user && item.studentId === user.studentId;
            const statusDisplay = getStatusDisplay(item.status);
            
            const rowClass = `${statusDisplay.bg} border-l-4 ${isCurrentUser ? 'border-blue-600' : 'border-gray-300'}`;
            
            return (
              <div key={item.id} className={`${statusDisplay.bg} border-l-4 ${isCurrentUser ? 'border-blue-600' : 'border-gray-300'} rounded-lg p-3 shadow-sm`}>
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <span className="text-xl font-black text-gray-900">#{index + 1}</span>
                    <div>
                      <div className="font-bold text-lg text-gray-900">{item.userName}</div>
                      {item.userRoom && <div className="text-xs text-gray-600">–ö–æ–º–Ω–∞—Ç–∞ {item.userRoom}</div>}
                    </div>
                  </div>
                  <span className={`px-2 py-1 rounded-full text-xs font-bold ${statusDisplay.badgeColor} whitespace-nowrap`}>
                    {statusDisplay.badge}
                  </span>
                </div>
                
                {/* –ò–Ω—Ñ–æ - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å–µ—Ç–∫–∞ */}
                <div className="grid grid-cols-3 gap-2 mb-2 text-sm">
                  <div className="flex flex-col">
                    <span className="text-xs text-gray-600">–°—Ç–∏—Ä–æ–∫</span>
                    <span className="text-lg font-bold text-blue-700">{item.washCount || 1}</span>
                  </div>
                  <div className="flex flex-col">
                    <span className="text-xs text-gray-600">–û–ø–ª–∞—Ç–∞</span>
                    <span className="text-sm font-bold text-gray-900">
                      {item.paymentType === 'coupon' ? 'üé´ –ö—É–ø–æ–Ω' : 
                       item.paymentType === 'both' ? 'üíµ+üé´' : 
                       'üíµ –î–µ–Ω—å–≥–∏'}
                    </span>
                  </div>
                  {/* –í—Ä–µ–º—è */}
                  {item.status === QueueStatus.DONE && item.finishedAt ? (
                    <div className="flex flex-col">
                      <span className="text-xs text-gray-600">–ó–∞–∫–æ–Ω—á–∏–ª</span>
                      <span className="text-lg font-bold text-emerald-700">
                        {(() => {
                          const date = new Date(item.finishedAt);
                          const hours = date.getHours().toString().padStart(2, '0');
                          const minutes = date.getMinutes().toString().padStart(2, '0');
                          return `${hours}:${minutes}`;
                        })()}
                      </span>
                    </div>
                  ) : item.expectedFinishAt ? (
                    <div className="flex flex-col">
                      <span className="text-xs text-gray-600">–ó–∞–∫–æ–Ω—á–∏—Ç</span>
                      <span className="text-lg font-bold text-blue-700">
                        {(() => {
                          const date = new Date(item.expectedFinishAt);
                          const hours = date.getHours().toString().padStart(2, '0');
                          const minutes = date.getMinutes().toString().padStart(2, '0');
                          return `${hours}:${minutes}`;
                        })()}
                      </span>
                    </div>
                  ) : null}
                </div>
                
                {/* –î–µ–π—Å—Ç–≤–∏—è */}
                <div>
                  <div className="flex flex-col gap-2">
                    {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ */}
                    {item.adminMessage && (
                      <div className="bg-yellow-100 border-l-4 border-yellow-500 p-3 rounded">
                        <p className="font-bold text-yellow-800">üì¢ {item.adminMessage}</p>
                      </div>
                    )}
                    
                    {/* –ö–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                    {isCurrentUser && item.status === QueueStatus.WAITING && (
                      <button
                        onClick={() => leaveQueue(item.id)}
                        className="bg-red-500 text-white font-semibold py-2 px-3 rounded-lg hover:bg-red-600 shadow-sm text-sm w-full"
                      >
                        ‚ùå –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å
                      </button>
                    )}
                    
                    {/* –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∞ - –í–°–ï –û–î–ù–û–í–†–ï–ú–ï–ù–ù–û */}
                    {isAdmin && (
                      <div className="grid grid-cols-2 gap-2">
                        {/* –ü–æ–∑–≤–∞—Ç—å –∑–∞ –∫–ª—é—á–æ–º */}
                        <button
                          className="bg-yellow-500 text-white font-semibold py-2 px-2 rounded-lg text-xs hover:bg-yellow-600 shadow-sm"
                          onClick={async () => {
                            await setQueueStatus(item.id, QueueStatus.READY);
                            const success = await sendTelegramNotification({
                              type: 'admin_call_for_key',
                              userName: item.userName,
                              userRoom: item.userRoom,
                              studentId: item.studentId,
                              position: index + 1,
                              expectedFinishAt: item.expectedFinishAt
                            });
                            if (success) {
                              alert(`‚úÖ ${item.userName} –ø–æ–∑–≤–∞–Ω!`);
                            }
                          }}
                        >
                          üîî –ü–æ–∑–≤–∞—Ç—å
                        </button>
                        
                        {/* –ó–∞–±—Ä–∞–ª –∫–ª—é—á */}
                        <button
                          className="bg-green-600 text-white font-semibold py-2 px-2 rounded-lg text-xs hover:bg-green-700 shadow-sm"
                          onClick={async () => {
                            console.log('üîë –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ó–∞–±—Ä–∞–ª –¥–ª—è:', item.userName, item.id);
                            await startWashing(item.id);
                            console.log('‚úÖ startWashing –∑–∞–≤–µ—Ä—à–µ–Ω');
                            alert(`‚úÖ ${item.userName} –∑–∞–±—Ä–∞–ª –∫–ª—é—á –∏ –Ω–∞—á–∞–ª —Å—Ç–∏—Ä–∫—É!`);
                          }}
                        >
                          üîë –ó–∞–±—Ä–∞–ª
                        </button>
                        
                        {/* –í–µ—Ä–Ω—É—Ç—å –∫–ª—é—á */}
                        <button
                          className="bg-orange-500 text-white font-semibold py-2 px-2 rounded-lg text-xs hover:bg-orange-600 shadow-sm"
                          onClick={async () => {
                            try {
                              console.log('üîî –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –í–µ—Ä–Ω—É—Ç—å –¥–ª—è:', item.userName, item.id);
                              // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                              console.log('‚öôÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º returnKeyAlert = true');
                              await updateQueueItem(item.id, { returnKeyAlert: true });
                              console.log('‚úÖ returnKeyAlert —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
                              
                              const success = await sendTelegramNotification({
                                type: 'admin_return_key',
                                userName: item.userName,
                                userRoom: item.userRoom,
                                studentId: item.studentId,
                                expectedFinishAt: item.expectedFinishAt
                              });
                              if (success) {
                                alert(`‚úÖ ${item.userName} –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –∫–ª—é—á!`);
                              } else {
                                alert(`‚ö†Ô∏è ${item.userName} –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª Telegram`);
                              }
                            } catch (error) {
                              console.error('Error sending notification:', error);
                              alert('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
                            }
                          }}
                        >
                          üîî –í–µ—Ä–Ω—É—Ç—å
                        </button>
                        
                        {/* –ü–æ—Å—Ç–∏—Ä–∞–ª—Å—è */}
                        <button
                          className="bg-emerald-600 text-white font-semibold py-2 px-2 rounded-lg text-xs hover:bg-emerald-700 shadow-sm"
                          onClick={() => markDone(item.id)}
                        >
                          ‚úÖ –ì–æ—Ç–æ–≤–æ
                        </button>
                        
                        {/* –û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å –≤ –æ–∂–∏–¥–∞–Ω–∏–µ */}
                        <button
                          className="bg-gray-500 text-white font-semibold py-2 px-2 rounded-lg text-xs hover:bg-gray-600 shadow-sm"
                          onClick={async () => {
                            try {
                              // –í–µ—Ä–Ω—É—Ç—å –≤ –æ–∂–∏–¥–∞–Ω–∏–µ, –æ—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∏—Ä–∫—É, —É–±—Ä–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                              if (item.status === QueueStatus.WASHING) {
                                await cancelWashing(item.id);
                              } else {
                                await setQueueStatus(item.id, QueueStatus.WAITING);
                              }
                              await updateQueueItem(item.id, { returnKeyAlert: false });
                              alert(`‚úÖ ${item.userName} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –æ–∂–∏–¥–∞–Ω–∏–µ!`);
                            } catch (error) {
                              console.error('Error canceling:', error);
                              alert('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã');
                            }
                          }}
                        >
                          ‚ùå –û—Ç–º–µ–Ω–∞
                        </button>
                        
                        {/* –£–¥–∞–ª–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏ */}
                        <button
                          className="bg-red-600 text-white font-semibold py-2 px-2 rounded-lg text-xs hover:bg-red-700 shadow-sm col-span-2"
                          onClick={async () => {
                            if (confirm(`–£–¥–∞–ª–∏—Ç—å ${item.userName} –∏–∑ –æ—á–µ—Ä–µ–¥–∏?`)) {
                              await removeFromQueue(item.id);
                              alert(`‚úÖ ${item.userName} —É–¥–∞–ª–µ–Ω!`);
                            }
                          }}
                        >
                          üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                        </button>
                      </div>
                    )}
                    
                    {/* –°—Ç–∞—Ç—É—Å –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∞ */}
                    {!isAdmin && item.status === QueueStatus.WASHING && (
                      <span className="text-green-700 font-bold text-sm">üü¢ –°—Ç–∏—Ä–∞–µ—Ç...</span>
                    )}
                    {!isAdmin && item.status === QueueStatus.DONE && (
                      <span className="text-emerald-700 font-bold text-sm">‚úÖ –ì–æ—Ç–æ–≤–æ</span>
                    )}
                  </div>
                </div>
              </div>
            );
          })}
      </div>
    </div>
  );
}
