"use client";

import { useState } from 'react';
import { useLaundry } from '@/contexts/LaundryContext';
import { QueueStatus } from '@/types';
import { formatDate } from '@/contexts/LaundryContext';
import { sendTelegramNotification } from '@/lib/telegram';

export default function QueueList() {
  const { 
    queue, 
    user, 
    leaveQueue, 
    updateQueueItem, 
    sendAdminMessage,
    setQueueStatus,
    startWashing,
    cancelWashing,
    markDone,
    isAdmin 
  } = useLaundry();
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
  const getStatusDisplay = (status: QueueStatus) => {
    switch(status) {
      case QueueStatus.WAITING:
        return { bg: 'bg-gray-50', text: 'text-gray-700', badge: '‚è≥ –û–∂–∏–¥–∞–µ—Ç', badgeColor: 'bg-gray-200 text-gray-700' };
      case QueueStatus.READY:
        return { bg: 'bg-yellow-50', text: 'text-yellow-900', badge: 'üü° –°–õ–ï–î–£–Æ–©–ò–ô!', badgeColor: 'bg-yellow-400 text-yellow-900' };
      case QueueStatus.KEY_ISSUED:
        return { bg: 'bg-blue-50', text: 'text-blue-900', badge: 'üîë –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å—Ç–∏—Ä–∞—Ç—å—Å—è', badgeColor: 'bg-blue-400 text-blue-900' };
      case QueueStatus.WASHING:
        return { bg: 'bg-green-50', text: 'text-green-900', badge: 'üü¢ –°–¢–ò–†–ê–ï–¢', badgeColor: 'bg-green-400 text-green-900' };
      case QueueStatus.DONE:
        return { bg: 'bg-emerald-50', text: 'text-emerald-900', badge: '‚úÖ –ü–û–°–¢–ò–†–ê–õ–°–Ø', badgeColor: 'bg-emerald-400 text-emerald-900' };
      default:
        return { bg: 'bg-white', text: 'text-gray-700', badge: status, badgeColor: 'bg-gray-200' };
    }
  };
  
  // Queue items including washing and done
  const queuedItems = queue.filter(item => 
    item.status === QueueStatus.WAITING || 
    item.status === QueueStatus.READY || 
    item.status === QueueStatus.KEY_ISSUED || 
    item.status === QueueStatus.WASHING || 
    item.status === QueueStatus.DONE
  );

  if (queuedItems.length === 0) {
    return (
      <div className="bg-white p-4 rounded-lg shadow-lg border border-gray-200">
        <h2 className="text-xl font-bold mb-2 text-gray-800">üìã –û—á–µ—Ä–µ–¥—å</h2>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-lg border border-gray-200">
      <h2 className="text-xl font-bold p-3 bg-gray-50 rounded-t-lg text-gray-800">üìã –û—á–µ—Ä–µ–¥—å ({queuedItems.length})</h2>
      <div className="p-2 space-y-3">
        {queuedItems.map((item, index) => {
            const isCurrentUser = user && item.studentId === user.studentId;
            const statusDisplay = getStatusDisplay(item.status);
            
            const rowClass = `${statusDisplay.bg} border-l-4 ${isCurrentUser ? 'border-blue-600' : 'border-gray-300'}`;
            
            return (
              <div key={item.id} className={`${statusDisplay.bg} border-l-4 ${isCurrentUser ? 'border-blue-600' : 'border-gray-300'} rounded-lg p-3 shadow`}>
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
                <div className="flex items-start justify-between mb-2">
                  <div className="flex items-center gap-2">
                    <span className="text-2xl font-black text-gray-900">#{index + 1}</span>
                    <div>
                      <div className="font-black text-xl text-gray-900">{item.userName}</div>
                      {item.userRoom && <div className="text-sm font-bold text-gray-700">–ö–æ–º–Ω–∞—Ç–∞ {item.userRoom}</div>}
                    </div>
                  </div>
                  <span className={`px-3 py-1 rounded-full text-xs font-bold ${statusDisplay.badgeColor} whitespace-nowrap`}>
                    {statusDisplay.badge}
                  </span>
                </div>
                
                {/* –ò–Ω—Ñ–æ */}
                <div className="flex gap-4 mb-3 text-base">
                  <div className="flex items-center gap-1">
                    <span className="font-bold text-gray-900">–°—Ç–∏—Ä–æ–∫:</span>
                    <span className="text-2xl font-black text-blue-700">{item.washCount || 1}</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <span className="font-bold text-gray-900">–û–ø–ª–∞—Ç–∞:</span>
                    <span className="font-bold text-gray-900">
                      {item.paymentType === 'coupon' ? 'üé´ –ö—É–ø–æ–Ω' : 
                       item.paymentType === 'both' ? 'üíµ+üé´ –û–±–∞' : 
                       'üíµ –î–µ–Ω—å–≥–∏'}
                    </span>
                  </div>
                  {/* –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ç–∏—Ä–∫–∏ */}
                  {item.status === QueueStatus.DONE && item.finishedAt ? (
                    <div className="flex items-center gap-1">
                      <span className="font-bold text-gray-900">–ó–∞–∫–æ–Ω—á–∏–ª –≤:</span>
                      <span className="text-lg font-bold text-emerald-700">
                        {(() => {
                          const date = new Date(item.finishedAt);
                          const hours = date.getHours().toString().padStart(2, '0');
                          const minutes = date.getMinutes().toString().padStart(2, '0');
                          return `${hours}:${minutes}`;
                        })()}
                      </span>
                    </div>
                  ) : item.expectedFinishAt ? (
                    <div className="flex items-center gap-1">
                      <span className="font-bold text-gray-900">–ó–∞–∫–æ–Ω—á–∏—Ç –≤:</span>
                      <span className="text-lg font-bold text-blue-700">
                        {(() => {
                          const date = new Date(item.expectedFinishAt);
                          const hours = date.getHours().toString().padStart(2, '0');
                          const minutes = date.getMinutes().toString().padStart(2, '0');
                          return `${hours}:${minutes}`;
                        })()}
                      </span>
                    </div>
                  ) : null}
                </div>
                
                {/* –î–µ–π—Å—Ç–≤–∏—è */}
                <div>
                  <div className="flex flex-col gap-2">
                    {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ */}
                    {item.adminMessage && (
                      <div className="bg-yellow-100 border-l-4 border-yellow-500 p-3 rounded">
                        <p className="font-bold text-yellow-800">üì¢ {item.adminMessage}</p>
                      </div>
                    )}
                    
                    {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                    {isCurrentUser && item.status === QueueStatus.WAITING && (
                      <button
                        className="text-red-700 font-semibold hover:text-red-900 bg-red-100 px-3 py-2 rounded"
                        onClick={() => leaveQueue(item.id)}
                      >
                        ‚ùå –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å
                      </button>
                    )}
                    
                    {/* –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∞ */}
                    {isAdmin && (
                      <div className="flex flex-wrap gap-2">
                        {/* WAITING ‚Üí –ö–ª—é—á –≤—ã–¥–∞–Ω (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ WASHING) */}
                        {item.status === QueueStatus.WAITING && (
                          <button
                            className="bg-blue-600 text-white font-bold py-3 px-4 rounded-lg text-base hover:bg-blue-700 shadow-lg w-full"
                            onClick={async () => {
                              const success = await sendTelegramNotification({
                                type: 'admin_key_issued',
                                userName: item.userName,
                                userRoom: item.userRoom,
                                studentId: item.studentId,
                                expectedFinishAt: item.expectedFinishAt
                              });
                              // –°—Ä–∞–∑—É —Å—Ç–∞–≤–∏–º WASHING
                              await setQueueStatus(item.id, QueueStatus.WASHING);
                              
                              // –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞
                              if (success) {
                                alert(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${item.userName}!`);
                              } else {
                                alert(`‚ö†Ô∏è ${item.userName} –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª Telegram`);
                              }
                            }}
                          >
                            ‚úÖ –ö–ª—é—á –≤—ã–¥–∞–Ω
                          </button>
                        )}
                        
                        {/* WASHING ‚Üí –ü–æ—Å—Ç–∏—Ä–∞–ª—Å—è */}
                        {item.status === QueueStatus.WASHING && (
                          <button
                            className="bg-emerald-600 text-white font-bold py-3 px-4 rounded-lg text-base hover:bg-emerald-700 shadow-lg w-full"
                            onClick={() => markDone(item.id)}
                          >
                            ‚úÖ –ü–æ—Å—Ç–∏—Ä–∞–ª—Å—è
                          </button>
                        )}
                      </div>
                    )}
                    
                    {/* –°—Ç–∞—Ç—É—Å –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∞ */}
                    {!isAdmin && item.status === QueueStatus.WASHING && (
                      <span className="text-green-700 font-bold text-sm">üü¢ –°—Ç–∏—Ä–∞–µ—Ç...</span>
                    )}
                    {!isAdmin && item.status === QueueStatus.DONE && (
                      <span className="text-emerald-700 font-bold text-sm">‚úÖ –ì–æ—Ç–æ–≤–æ</span>
                    )}
                  </div>
                </div>
              </div>
            );
          })}
      </div>
    </div>
  );
}
