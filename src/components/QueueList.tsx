"use client";

import { useLaundry } from '@/contexts/LaundryContext';
import { QueueStatus } from '@/types';
import { sendTelegramNotification } from '@/lib/telegram';

export default function QueueList() {
  const { 
    queue, 
    user, 
    leaveQueue, 
    updateQueueItem, 
    setQueueStatus,
    removeFromQueue,
    startWashing,
    cancelWashing,
    markDone,
    isAdmin,
    machineState,
    transferUnfinishedToNextDay,
    changeQueuePosition, 
  } = useLaundry();
  
  // ‚úÖ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–∞–º
  const groupQueueByDate = (items: any[]) => {
    const groups: { [key: string]: any[] } = {};
    
    items.forEach(item => {
      const date = item.currentDate || new Date().toISOString().slice(0, 10);
      if (!groups[date]) {
        groups[date] = [];
      }
      groups[date].push(item);
    });
    
    return groups;
  };

  // ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
  const formatDateHeader = (dateStr: string) => {
    const date = new Date(dateStr + 'T00:00:00');
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    const dayNames = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
    
    const itemDate = new Date(dateStr + 'T00:00:00');
    itemDate.setHours(0, 0, 0, 0);
    
    if (itemDate.getTime() === today.getTime()) {
      return 'üìÖ –°–µ–≥–æ–¥–Ω—è, ' + dayNames[date.getDay()] + ' ' + date.getDate() + '.' + (date.getMonth() + 1);
    }
    
    if (itemDate.getTime() === tomorrow.getTime()) {
      return 'üìÖ –ó–∞–≤—Ç—Ä–∞, ' + dayNames[date.getDay()] + ' ' + date.getDate() + '.' + (date.getMonth() + 1);
    }
    
    return 'üìÖ ' + dayNames[date.getDay()] + ', ' + date.getDate() + '.' + (date.getMonth() + 1);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
  const getStatusDisplay = (status: QueueStatus) => {
    switch(status) {
      case QueueStatus.WAITING:
        return { bg: 'bg-gray-50', text: 'text-gray-700', badge: '‚è≥ –û–∂–∏–¥–∞–µ—Ç', badgeColor: 'bg-gray-200 text-gray-700' };
      case QueueStatus.READY:
        return { bg: 'bg-yellow-50', text: 'text-yellow-900', badge: 'üü° –°–õ–ï–î–£–Æ–©–ò–ô!', badgeColor: 'bg-yellow-400 text-yellow-900' };
      case QueueStatus.KEY_ISSUED:
        return { bg: 'bg-blue-50', text: 'text-blue-900', badge: 'üîë –ö–ª—é—á –≤—ã–¥–∞–Ω', badgeColor: 'bg-blue-400 text-blue-900' };
      case QueueStatus.WASHING:
        return { bg: 'bg-green-50', text: 'text-green-900', badge: 'üü¢ –°–¢–ò–†–ê–ï–¢', badgeColor: 'bg-green-400 text-green-900' };
      case QueueStatus.DONE:
        return { bg: 'bg-emerald-50', text: 'text-emerald-900', badge: '‚úÖ –ü–û–°–¢–ò–†–ê–õ–°–Ø', badgeColor: 'bg-emerald-400 text-emerald-900' };
      default:
        return { bg: 'bg-white', text: 'text-gray-700', badge: status, badgeColor: 'bg-gray-200' };
    }
  };
  
  // Queue items including washing and done
  const queuedItems = queue.filter(item => 
    item.status === QueueStatus.WAITING || 
    item.status === QueueStatus.READY || 
    item.status === QueueStatus.KEY_ISSUED || 
    item.status === QueueStatus.WASHING || 
    item.status === QueueStatus.DONE
  );

  // ‚úÖ –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ –¥–∞—Ç–∞–º
  const groupedQueue = groupQueueByDate(queuedItems);
  const sortedDates = Object.keys(groupedQueue).sort();

  if (queuedItems.length === 0) {
    return (
      <div className="bg-white p-4 rounded-lg shadow-lg border border-gray-200">
        <div className="flex items-center justify-between">
          <h2 className="text-xl font-bold text-gray-800">üìã –û—á–µ—Ä–µ–¥—å</h2>
          
          {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ */}
          {isAdmin && (
            <button
              onClick={transferUnfinishedToNextDay}
              className="px-3 py-1 bg-blue-600 text-white text-sm font-bold rounded hover:bg-blue-700"
            >
              üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
            </button>
          )}
        </div>
      </div>
    );
  }

  console.log('üé∞ Machine State:', machineState);
  
  return (
    <div className="bg-white rounded-lg shadow-lg border border-gray-200">
      <div className="flex items-center justify-between p-3 bg-gray-50 rounded-t-lg">
        <h2 className="text-xl font-bold text-gray-800">
          üìã –û—á–µ—Ä–µ–¥—å ({queuedItems.length})
        </h2>
        
        {/* ‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ */}
        {isAdmin && (
          <button
            onClick={transferUnfinishedToNextDay}
            className="px-3 py-1 bg-blue-600 text-white text-sm font-bold rounded hover:bg-blue-700"
          >
            üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏
          </button>
        )}
      </div>
      
      <div className="p-2 space-y-4">
        {sortedDates.map(dateKey => (
          <div key={dateKey} className="border-t-4 border-blue-200 pt-2">
            {/* ‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—Ç—ã */}
            <h3 className="text-lg font-bold text-blue-900 mb-2 sticky top-0 bg-white z-10 py-1">
              {formatDateHeader(dateKey)}
            </h3>
            
            {/* ‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É */}
            <div className="space-y-3">
              {groupedQueue[dateKey].map((item, index) => {
                const isCurrentUser = user && item.studentId === user.studentId;
                const statusDisplay = getStatusDisplay(item.status);
                const globalIndex = queuedItems.findIndex(q => q.id === item.id);
                
                return (
                  <div key={item.id} className={`${statusDisplay.bg} border-l-4 ${isCurrentUser ? 'border-blue-600' : 'border-gray-300'} rounded-lg p-3 shadow-sm`}>
                    {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center gap-2">
                        {/* ‚úÖ –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞ */}
                        {isAdmin && item.status === QueueStatus.WAITING && (
                          <div className="flex flex-col gap-1">
                            <button
                              onClick={() => changeQueuePosition(item.id, 'up')}
                              disabled={index === 0}
                              className="px-2 py-0.5 bg-gray-200 text-gray-700 text-xs rounded disabled:opacity-30 hover:bg-gray-300"
                            >
                              ‚ñ≤
                            </button>
                            <button
                              onClick={() => changeQueuePosition(item.id, 'down')}
                              disabled={index === groupedQueue[dateKey].length - 1}
                              className="px-2 py-0.5 bg-gray-200 text-gray-700 text-xs rounded disabled:opacity-30 hover:bg-gray-300"
                            >
                              ‚ñº
                            </button>
                          </div>
                        )}
                        
                        <div>
                          <div className="flex items-center gap-2">
                            <span className="text-xl font-black text-gray-900">
                              #{globalIndex + 1}
                            </span>
                            {item.position && (
                              <span className="text-sm text-gray-500 font-semibold">
                                (–ø–æ–∑.{item.position})
                              </span>
                            )}
                          </div>
                          <div className="font-bold text-lg text-gray-900">{item.userName}</div>
                          {item.userRoom && <div className="text-xs text-gray-600">–ö–æ–º–Ω–∞—Ç–∞ {item.userRoom}</div>}
                        </div>
                      </div>
                      <span className={`px-2 py-1 rounded-full text-xs font-bold ${statusDisplay.badgeColor} whitespace-nowrap`}>
                        {statusDisplay.badge}
                      </span>
                    </div>
                    
                    {/* –ò–Ω—Ñ–æ - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å–µ—Ç–∫–∞ */}
                    <div className="grid grid-cols-3 gap-2 mb-2 text-sm">
                      <div className="flex flex-col">
                        <span className="text-xs text-gray-600">–°—Ç–∏—Ä–æ–∫</span>
                        <span className="text-lg font-bold text-blue-700">{item.washCount || 1}</span>
                      </div>
                      <div className="flex flex-col">
                        <span className="text-xs text-gray-600">–û–ø–ª–∞—Ç–∞</span>
                        <span className="text-sm font-bold text-gray-900">
                          {item.paymentType === 'coupon' ? 'üé´ –ö—É–ø–æ–Ω' : 
                           item.paymentType === 'both' ? 'üíµ+üé´' : 
                           'üíµ –î–µ–Ω—å–≥–∏'}
                        </span>
                      </div>
                      {/* –í—Ä–µ–º—è */}
                      {item.status === QueueStatus.DONE && item.finishedAt ? (
                        <div className="flex flex-col">
                          <span className="text-xs text-gray-600">–ó–∞–∫–æ–Ω—á–∏–ª</span>
                          <span className="text-lg font-bold text-emerald-700">
                            {(() => {
                              const date = new Date(item.finishedAt);
                              const hours = date.getHours().toString().padStart(2, '0');
                              const minutes = date.getMinutes().toString().padStart(2, '0');
                              return `${hours}:${minutes}`;
                            })()}
                          </span>
                        </div>
                      ) : item.expectedFinishAt ? (
                        <div className="flex flex-col">
                          <span className="text-xs text-gray-600">–ó–∞–∫–æ–Ω—á–∏—Ç</span>
                          <span className="text-lg font-bold text-blue-700">
                            {(() => {
                              const date = new Date(item.expectedFinishAt);
                              const hours = date.getHours().toString().padStart(2, '0');
                              const minutes = date.getMinutes().toString().padStart(2, '0');
                              return `${hours}:${minutes}`;
                            })()}
                          </span>
                        </div>
                      ) : null}
                    </div>
                    
                    {/* –î–µ–π—Å—Ç–≤–∏—è */}
                    <div>
                      <div className="flex flex-col gap-2">
                        {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ */}
                        {item.adminMessage && (
                          <div className="bg-yellow-100 border-l-4 border-yellow-500 p-3 rounded">
                            <p className="font-bold text-yellow-800">üì¢ {item.adminMessage}</p>
                          </div>
                        )}
                        
                        {/* –ö–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                        {isCurrentUser && item.status === QueueStatus.WAITING && (
                          <button
                            onClick={() => leaveQueue(item.id)}
                            className="bg-red-500 text-white font-semibold py-2 px-3 rounded-lg hover:bg-red-600 shadow-sm text-sm w-full"
                          >
                            ‚ùå –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å
                          </button>
                        )}
                        
                        {/* –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∞ */}
                        {isAdmin && (
                          <div className="space-y-2">
                            {/* –ë–õ–û–ö: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
                            <div className="grid grid-cols-3 gap-2">
                              <button
                                className="bg-yellow-500 text-white font-semibold py-2 px-2 rounded-lg text-xs hover:bg-yellow-600 shadow-sm"
                                onClick={async () => {
                                  try {
                                    await updateQueueItem(item.id, { returnKeyAlert: false });
                                    await new Promise(resolve => setTimeout(resolve, 100));
                                    await setQueueStatus(item.id, QueueStatus.READY);
                                    
                                    const success = await sendTelegramNotification({
                                      type: 'admin_call_for_key',
                                      userName: item.userName,
                                      userRoom: item.userRoom,
                                      studentId: item.studentId,
                                      expectedFinishAt: item.expectedFinishAt
                                    });
                                    
                                    alert(success ? `‚úÖ ${item.userName} –ø–æ–∑–≤–∞–Ω!` : `‚ö†Ô∏è ${item.userName} –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª Telegram`);
                                  } catch (error) {
                                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ:', error);
                                    alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Å—Ç—É–¥–µ–Ω—Ç–∞');
                                  }
                                }}
                              >
                                üîî –ü–æ–∑–≤–∞—Ç—å
                              </button>
                              
                              <button
                                className="bg-orange-500 text-white font-semibold py-2 px-2 rounded-lg text-xs hover:bg-orange-600 shadow-sm"
                                onClick={async () => {
                                  try {
                                    if (item.status === QueueStatus.READY) {
                                      await setQueueStatus(item.id, QueueStatus.WAITING);
                                      await new Promise(resolve => setTimeout(resolve, 100));
                                    }
                                    
                                    await updateQueueItem(item.id, { returnKeyAlert: true });
                                    
                                    const success = await sendTelegramNotification({
                                      type: 'admin_return_key',
                                      userName: item.userName,
                                      userRoom: item.userRoom,
                                      studentId: item.studentId,
                                      expectedFinishAt: item.expectedFinishAt
                                    });
                                    
                                    alert(success ? `‚úÖ ${item.userName} –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –∫–ª—é—á!` : `‚ö†Ô∏è ${item.userName} –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª Telegram`);
                                  } catch (error) {
                                    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
                                    alert('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
                                  }
                                }}
                              >
                                üîî –í–µ—Ä–Ω—É—Ç—å
                              </button>
                              
                              <button
                                className="bg-gray-400 text-white font-semibold py-2 px-2 rounded-lg text-xs hover:bg-gray-500 shadow-sm"
                                onClick={async () => {
                                  try {
                                    await updateQueueItem(item.id, { returnKeyAlert: false });
                                    await new Promise(resolve => setTimeout(resolve, 100));
                                    
                                    if (item.status === QueueStatus.READY) {
                                      await setQueueStatus(item.id, QueueStatus.WAITING);
                                    }
                                    
                                    alert(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã –¥–ª—è ${item.userName}`);
                                  } catch (error) {
                                    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
                                    alert('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
                                  }
                                }}
                              >
                                üîï –û—Ç–º–µ–Ω–∏—Ç—å
                              </button>
                            </div>

                            {/* –ë–õ–û–ö: –î–µ–π—Å—Ç–≤–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º */}
                            <div className="grid grid-cols-2 gap-2">
                              <button
                                className="bg-blue-600 text-white font-semibold py-2 px-2 rounded-lg text-xs hover:bg-blue-700 shadow-sm"
                                onClick={async () => {
                                  try {
                                    await updateQueueItem(item.id, { returnKeyAlert: false });
                                    await new Promise(resolve => setTimeout(resolve, 200));
                                    await startWashing(item.id);
                                    alert(`‚úÖ ${item.userName} –∑–∞–±—Ä–∞–ª –∫–ª—é—á –∏ –Ω–∞—á–∞–ª —Å—Ç–∏—Ä–∫—É!`);
                                  } catch (error) {
                                    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
                                    alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–ª—é—á–∞');
                                  }
                                }}
                              >
                                üîë –ö–ª—é—á –≤—ã–¥–∞–Ω
                              </button>
                              
                              <button
                                className="bg-green-600 text-white font-semibold py-2 px-2 rounded-lg text-xs hover:bg-green-700 shadow-sm"
                                onClick={async () => {
                                  try {
                                    await updateQueueItem(item.id, { returnKeyAlert: false });
                                    await new Promise(resolve => setTimeout(resolve, 200));
                                    await startWashing(item.id);
                                    alert(`‚úÖ ${item.userName} —Å—Ç–∏—Ä–∞–µ—Ç!`);
                                  } catch (error) {
                                    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
                                    alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ç–∏—Ä–∫–∏');
                                  }
                                }}
                              >
                                üü¢ –°—Ç–∏—Ä–∞–µ—Ç
                              </button>
                              
                              <button
                                className="bg-emerald-600 text-white font-semibold py-2 px-2 rounded-lg text-xs hover:bg-emerald-700 shadow-sm"
                                onClick={async () => {
                                  try {
                                    await updateQueueItem(item.id, { returnKeyAlert: false });
                                    await new Promise(resolve => setTimeout(resolve, 100));
                                    await markDone(item.id);
                                    alert(`‚úÖ ${item.userName} –∑–∞–∫–æ–Ω—á–∏–ª!`);
                                  } catch (error) {
                                    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
                                    alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏');
                                  }
                                }}
                              >
                                ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å
                              </button>
                              
                              <button
                                className="bg-purple-500 text-white font-semibold py-2 px-2 rounded-lg text-xs hover:bg-purple-600 shadow-sm"
                                onClick={async () => {
                                  try {
                                    await updateQueueItem(item.id, { returnKeyAlert: false });
                                    await new Promise(resolve => setTimeout(resolve, 100));
                                    
                                    if (item.status === QueueStatus.WASHING) {
                                      await cancelWashing(item.id);
                                    } else {
                                      await setQueueStatus(item.id, QueueStatus.WAITING);
                                    }
                                    
                                    alert(`‚úÖ ${item.userName} –≤ –æ–∂–∏–¥–∞–Ω–∏–∏`);
                                  } catch (error) {
                                    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
                                    alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ');
                                  }
                                }}
                              >
                                ‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–µ
                              </button>
                            </div>

                            {/* –ë–õ–û–ö: –£–¥–∞–ª–∏—Ç—å */}
                            <button
                              className="bg-red-600 text-white font-semibold py-2 px-2 rounded-lg text-xs hover:bg-red-700 shadow-sm w-full"
                              onClick={async () => {
                                if (confirm(`–£–¥–∞–ª–∏—Ç—å ${item.userName} –∏–∑ –æ—á–µ—Ä–µ–¥–∏?`)) {
                                  await removeFromQueue(item.id);
                                  alert(`‚úÖ ${item.userName} —É–¥–∞–ª–µ–Ω!`);
                                }
                              }}
                            >
                              üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                            </button>
                          </div>
                        )}
                        
                        {/* –°—Ç–∞—Ç—É—Å –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∞ */}
                        {!isAdmin && item.status === QueueStatus.WASHING && (
                          <span className="text-green-700 font-bold text-sm">üü¢ –°—Ç–∏—Ä–∞–µ—Ç...</span>
                        )}
                        {!isAdmin && item.status === QueueStatus.DONE && (
                          <span className="text-emerald-700 font-bold text-sm">‚úÖ –ì–æ—Ç–æ–≤–æ</span>
                        )}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}